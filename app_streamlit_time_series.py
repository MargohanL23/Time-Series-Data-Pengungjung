# -*- coding: utf-8 -*-
"""app_streamlit_time_series.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12tOZR7Y8J4IkjeKsPF6dzGK27G-OsUOt
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt

st.set_page_config(page_title="Prediksi Wisatawan", layout="wide")

# --- Judul Aplikasi ---
st.title("üìà Prediksi Jumlah Wisatawan Mancanegara ke Indonesia")
st.markdown("""
Aplikasi ini memprediksi jumlah kunjungan wisatawan mancanegara ke Indonesia per bulan menggunakan model **Random Forest Regressor** berdasarkan data tahun 2018‚Äì2025.
""")

# --- Load Dataset ---
@st.cache_data
def load_data():
    df = pd.read_csv("jumlah_kunjungan_wisman_2018_2025.csv")
    df['Tanggal'] = pd.to_datetime(df['Tanggal'])
    df.set_index('Tanggal', inplace=True)
    return df

df = load_data()

# --- Visualisasi Tren Historis ---
st.subheader("üìä Visualisasi Data Historis")
fig, ax = plt.subplots(figsize=(12, 5))
ax.plot(df.index, df['Jumlah Kunjungan'], marker='o', linestyle='-')
ax.set_title("Jumlah Kunjungan Wisatawan per Bulan (2018‚Äì2025)")
ax.set_xlabel("Tanggal")
ax.set_ylabel("Jumlah Kunjungan")
ax.grid(True)
st.pyplot(fig)

# --- Feature Engineering ---
df['lag_1'] = df['Jumlah Kunjungan'].shift(1)
df['lag_2'] = df['Jumlah Kunjungan'].shift(2)
df['lag_3'] = df['Jumlah Kunjungan'].shift(3)
df['rolling_mean_3'] = df['Jumlah Kunjungan'].rolling(3).mean()
df['month'] = df.index.month
df['year'] = df.index.year
df['quarter'] = df.index.quarter
df['sin_month'] = np.sin(2 * np.pi * df.index.month / 12)
df['cos_month'] = np.cos(2 * np.pi * df.index.month / 12)
df.dropna(inplace=True)

# --- Split Data ---
train_end = '2024-08-01'
df_train = df[:train_end]
df_test = df[train_end:]

feature_cols = ['lag_1', 'lag_2', 'lag_3', 'rolling_mean_3', 'month', 'year', 'quarter', 'sin_month', 'cos_month']
target_col = 'Jumlah Kunjungan'

X_train = df_train[feature_cols]
y_train = df_train[target_col]
X_test = df_test[feature_cols]
y_test = df_test[target_col]

# --- Train Model ---
model_rf = RandomForestRegressor(n_estimators=100, random_state=42)
model_rf.fit(X_train, y_train)
y_pred = model_rf.predict(X_test)

# --- Evaluasi ---
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

st.subheader("üìã Evaluasi Model")
st.markdown(f"""
- **MAE**: {mae:,.0f}
- **RMSE**: {rmse:,.0f}
- **R-squared**: {r2:.4f}
""")

# --- Visualisasi Prediksi vs Aktual ---
st.subheader("üîç Prediksi vs Aktual")
fig2, ax2 = plt.subplots(figsize=(12, 5))
ax2.plot(y_test.index, y_test, label='Aktual', marker='o')
ax2.plot(y_test.index, y_pred, label='Prediksi', marker='s', linestyle='--')
ax2.set_title("Prediksi vs Aktual Jumlah Kunjungan")
ax2.set_xlabel("Tanggal")
ax2.set_ylabel("Jumlah Kunjungan")
ax2.legend()
ax2.grid(True)
st.pyplot(fig2)

# --- Recursive Forecasting ---
st.subheader("üìÖ Prediksi 6 Bulan Mendatang (Recursive)")

df_forecast = df.copy()
forecast_results = []
n_steps = 6

for i in range(n_steps):
    last_row = df_forecast.iloc[-1]
    next_date = last_row.name + pd.DateOffset(months=1)
    next_month = next_date.month
    next_year = next_date.year
    next_quarter = (next_month - 1) // 3 + 1
    sin_month = np.sin(2 * np.pi * next_month / 12)
    cos_month = np.cos(2 * np.pi * next_month / 12)

    input_features = pd.DataFrame({
        'lag_1': [last_row['Jumlah Kunjungan']],
        'lag_2': [last_row['lag_1']],
        'lag_3': [last_row['lag_2']],
        'rolling_mean_3': [df_forecast['Jumlah Kunjungan'].iloc[-3:].mean()],
        'month': [next_month],
        'year': [next_year],
        'quarter': [next_quarter],
        'sin_month': [sin_month],
        'cos_month': [cos_month],
    }, index=[next_date])

    y_pred_next = model_rf.predict(input_features)[0]
    forecast_results.append((next_date.strftime('%Y-%m'), int(y_pred_next)))

    next_row = input_features.copy()
    next_row['Jumlah Kunjungan'] = y_pred_next
    df_forecast = pd.concat([df_forecast, next_row])

# --- Tampilkan Hasil Prediksi
df_pred = pd.DataFrame(forecast_results, columns=["Bulan", "Prediksi Jumlah Kunjungan"])
st.table(df_pred.set_index("Bulan"))